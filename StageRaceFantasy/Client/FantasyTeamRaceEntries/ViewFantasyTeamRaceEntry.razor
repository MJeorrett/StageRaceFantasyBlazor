@page "/fantasy-teams/{teamId:int}/race-entries/{raceId:int}"

@using StageRaceFantasy.Shared.Models

@inject HttpClient httpClient

@if (raceEntry == null)
{
    <Loader />
}
else
{
    <MatHeadline2>@raceEntry.RaceName</MatHeadline2>

    <MatHeadline4>Rider Selections</MatHeadline4>

    <MatTable Items="@rowDatas"
              ShowPaging="false"
              PageSize="int.MaxValue"
              Striped="true">
        <MatTableHeader>
            <th>Index</th>
            <th>Rider</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.FirstName</td>
            <td>@context.LastName</td>
            <td>
                <MatIconButton @onclick="@(() => RemoveRider(context.Id))" Icon="delete" Style="color: red" />
            </td>
        </MatTableRow>
    </MatTable>
    @if(availableRiders.Length == 0)
    {
        <MatBody1>You have selected all available riders.</MatBody1>
    }
    else
    {
        <MatSelect Label="Select a Rider" @bind-Value="@selectedRiderId">
            @foreach (var rider in availableRiders)
            {
                <MatOption Value="@rider.RiderId">@rider.RiderFirstName @rider.RiderLastName</MatOption>
            }
        </MatSelect>
    }
    <MatButton OnClick="@AddRider">Add Rider</MatButton>
}

@code {
    private record RowDataRider(int Id, string Name) { }
    private record RowData(int Index, RowDataRider SelectedRider, RowDataRider[] RiderOptions) { }

    [Parameter] public int teamId { get; set; }
    [Parameter] public int raceId { get; set; }

    private GetFantasyTeamRaceEntryDto raceEntry;
    private GetRiderRaceEntryDto[] availableRiders;
    private int selectedRiderId;

    protected override async Task OnInitializedAsync()
    {
        selectedRiderId = 0;
        raceEntry = await httpClient.GetJsonAsync<GetFantasyTeamRaceEntryDto>($"api/fantasy-teams/{teamId}/race-entries/{raceEntryId}");
        var allEnteredRiders = await httpClient.GetJsonAsync<GetRiderRaceEntryDto[]>($"api/races/{raceEntryId}/entries");

        availableRiders = allEnteredRiders.Where(x => !raceEntry.Riders.Any(r => r.Id == x.RiderId)).ToArray();
    }

    private async Task AddRider()
    {
        await httpClient.PostAsync($"api/fantasy-teams/{teamId}/race-entries/{raceEntryId}/riders/{selectedRiderId}", new StringContent(""));
        await OnInitializedAsync();
    }

    private async Task RemoveRider(int riderId)
    {
        await httpClient.DeleteAsync($"api/fantasy-teams/{teamId}/race-entries/{raceEntryId}/riders/{riderId}");
        await OnInitializedAsync();
    }
}