@page "/fantasy-teams/{teamId:int}/race-entries/{raceId:int}"

@using StageRaceFantasy.Shared.Models

@inject HttpClient httpClient

@if (raceEntry == null)
{
    <Loader />
}
else
{
    <MatHeadline2>@raceEntry.RaceName</MatHeadline2>

    <MatHeadline4>Rider Selections</MatHeadline4>

    <MatTable Items="@rowDatas"
              ShowPaging="false"
              PageSize="int.MaxValue"
              Striped="true">
        <MatTableHeader>
            <th>Index</th>
            <th>Rider</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>
                @context.Index
            </td>
            <td>
                @if (context.SelectedRider == null)
                {
                    <MatSelect Label="Select a Rider" Value="0" ValueChanged="@((int riderId) => AddRider(riderId))">
                        @foreach (var riderOption in context.RiderOptions)
                        {
                            <MatOption Value="@riderOption.Id">@riderOption.Name</MatOption>
                            }
                    </MatSelect>
                }
                else
                {
                    <p>@context.SelectedRider.Name</p>
                }
            </td>
            <td>
                @if (context.SelectedRider != null) {
                    <MatIconButton @onclick="@(() => RemoveRider(context.SelectedRider.Id))" Icon="delete" Style="color: red" />
                }
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private record RowDataRider(int Id, string Name) { }
    private record RowData(int Index, RowDataRider SelectedRider, RowDataRider[] RiderOptions) { }

    [Parameter] public int teamId { get; set; }
    [Parameter] public int raceId { get; set; }

    private GetFantasyTeamRaceEntryDto raceEntry;
    private RowData[] rowDatas;

    protected override async Task OnInitializedAsync()
    {
        raceEntry = await httpClient.GetJsonAsync<GetFantasyTeamRaceEntryDto>($"api/fantasy-teams/{teamId}/race-entries/{raceId}");
        var allRiders = await httpClient.GetJsonAsync<GetRiderRaceEntryDto[]>($"api/races/{raceId}/entries");
        var raceEntryRiderIds = raceEntry.Riders.Select(x => x.Id);
        var availableRiders = allRiders
            .Where(x => !raceEntryRiderIds.Contains(x.RiderId))
            .Select(x => new RowDataRider(x.RiderId, $"{x.RiderLastName}, {x.RiderFirstName}"))
            .ToArray();

        var emptyPlaces = new List<RowData>();

        for (int i = raceEntry.Riders.Count(); i < 8; i++)
        {
            emptyPlaces.Add(new RowData(i, null, availableRiders));
        }

        rowDatas = raceEntry.Riders
            .Select((x, i) => new RowData(i, new RowDataRider(x.Id, $"{x.LastName}, {x.FirstName}"), null))
            .Concat(emptyPlaces)
            .ToArray();

        Console.WriteLine($"Initialised row data: {System.Text.Json.JsonSerializer.Serialize(rowDatas)}");
    }

    async Task AddRider(int riderId)
    {
        await httpClient.PostAsync($"api/fantasy-teams/{teamId}/race-entries/{raceId}/riders/{riderId}", new StringContent(""));
        await OnInitializedAsync();
    }

    async Task RemoveRider(int riderId)
    {
        await httpClient.DeleteAsync($"api/fantasy-teams/{teamId}/race-entries/{raceId}/riders/{riderId}");
        await OnInitializedAsync();
    }
}