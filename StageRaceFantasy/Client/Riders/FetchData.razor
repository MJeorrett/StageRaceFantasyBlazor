@page "/riders"

@using StageRaceFantasy.Shared.Models

@inject HttpClient httpClient
@inject IJSRuntime js

<h1>Riders</h1>
<div>
    <MatButton Link="riders/create">Create New</MatButton>
</div>

@if (riders == null)
{
    <p><em>Loading...</em></p>
}
else if (riders.Length == 0)
{
    <p>No riders found.</p>
}
else
{
    <MatTable Items="@riders"
                FilterByColumnName="LastName"
                ShowPaging="false"
                PageSize="int.MaxValue"
                Striped="true">
        <MatTableHeader>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.FirstName</td>
            <td>@context.LastName</td>
            <td>
                <MatIconButton @onclick="@(() => DeleteRider(context.Id))" Icon="delete" Style="color: red" />
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private Rider[] riders;

    protected override async Task OnInitializedAsync()
    {
        riders = await httpClient.GetFromJsonAsync<Rider[]>("api/riders");
    }

    async Task DeleteRider(int riderId)
    {
        var rider = riders.First(x => x.Id == riderId);

        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete rider {rider.FirstName} {rider.LastName}?"))
        {
            await httpClient.DeleteAsync($"api/riders/{rider.Id}");
            await OnInitializedAsync();
        }
    }
}
