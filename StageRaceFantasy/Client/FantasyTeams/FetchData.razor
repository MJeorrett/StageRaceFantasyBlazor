@page "/fantasy-teams"

@using StageRaceFantasy.Shared.Models

@inject HttpClient httpClient
@inject IJSRuntime js

<MatHeadline2>Fantasy Teams</MatHeadline2>
<div>
    <MatButton Link="fantasy-teams/create">Create New</MatButton>
</div>

@if (fantasyTeams == null)
{
    <MatBody1 Style="font-weight: bolder"><em>Loading...</em></MatBody1>
}
else if (fantasyTeams.Length == 0)
{
    <MatBody1 Style="font-weight: bolder"><em>No Teams Found.</em></MatBody1>
}
else
{
    <MatTable Items="@fantasyTeams"
              FilterByColumnName="Name"
              ShowPaging="false"
              Striped="true">
        <MatTableHeader>
            <th>Id</th>
            <th>Name</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.Name</td>
            <td>
                <MatIconButton @onclick="@(() => DeleteTeam(context.Id))" Icon="delete" Style="color: red" />
                <MatButton Link="@($"fantasy-teams/{@context.Id}")">View</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private FantasyTeam[] fantasyTeams;

    protected override async Task OnInitializedAsync()
    {
        fantasyTeams = await httpClient.GetFromJsonAsync<FantasyTeam[]>("api/fantasy-teams");
    }

    async Task DeleteTeam(int teamId)
    {
        var team = fantasyTeams.First(x => x.Id == teamId);

        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete fantasy team {team.Name}?"))
        {
            await httpClient.DeleteAsync($"api/fantasy-teams/{team.Id}");
            await OnInitializedAsync();
        }
    }
}
