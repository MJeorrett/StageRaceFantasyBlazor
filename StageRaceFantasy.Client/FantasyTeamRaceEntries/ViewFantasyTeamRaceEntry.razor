@page "/fantasy-teams/{teamId:int}/race-entries/{raceId:int}"

@using StageRaceFantasy.Application.FantasyTeamRaceEntries.Queries.GetById
@using StageRaceFantasy.Application.RiderRaceEntries.Queries.GetAll

@inject HttpClient httpClient

@if (vm == null || riderSelections == null)
{
    <Loader />
}
else
{
    <MatHeadline2>@vm.RaceName</MatHeadline2>

    <MatHeadline4>Rider Selections</MatHeadline4>

    <MatTable Items="@riderSelections"
              ShowPaging="false"
              PageSize="int.MaxValue"
              Striped="true">
        <MatTableHeader>
            <th>Index</th>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            @if (context.Rider == null)
                {
                <td>@context.Index</td>
                <td></td>
                <td><i>No Rider Selected</i></td>
                <td></td>
                <td></td>
                }
                else
                {
                <td>@context.Index</td>
                <td>@context.Rider.Id</td>
                <td>@context.Rider.FirstName</td>
                <td>@context.Rider.LastName</td>
                <td>
                    <MatIconButton @onclick="@(() => RemoveRider(context.Rider.Id))" Icon="delete" Style="color: red" />
                </td>
                }
        </MatTableRow>
    </MatTable>

    @if (availableRiders.Length == 0)
    {
        <MatBody1>You have selected all available riders.</MatBody1>
    }
    else
    {
        @*TODO: Figure out how to get MatSelect working.  Throws error when button clicked at the moment.  Possibly to do with this: https://github.com/SamProf/MatBlazor/issues/651.*@
        <select Label="Select a Rider" @bind="@selectedRiderId">
            <option disabled="true" value="0">-- Please Select --</option>
            @foreach (var rider in availableRiders)
            {
                <option value="@rider.RiderId">@rider.RiderLastName, @rider.RiderFirstName</option>
            }
        </select>
        <MatButton OnClick="@AddRider" Disabled="@(selectedRiderId == 0)">Add Rider</MatButton>
    }
}

@code {

    record RiderSelectionRow(int Index, RiderDto Rider)
    {
        public RiderSelectionRow(int index)
            : this(index, null)
        {

        }
    }

    [Parameter] public int teamId { get; set; }
    [Parameter] public int raceId { get; set; }

    private GetFantasyTeamRaceEntryByIdVm vm;
    private List<RiderSelectionRow> riderSelections;
    private RiderRaceEntryDto[] availableRiders;
    private int selectedRiderId;

    protected override async Task OnInitializedAsync()
    {
        selectedRiderId = 0;
        riderSelections = null;
        vm = await httpClient.GetJsonAsync<GetFantasyTeamRaceEntryByIdVm>($"api/fantasy-teams/{teamId}/race-entries/{raceId}");
        var allEnteredRiders = await httpClient.GetJsonAsync<GetAllRiderRaceEntriesVm>($"api/races/{raceId}/entries");

        availableRiders = allEnteredRiders.Entries.Where(x => !vm.Riders.Any(r => r.Id == x.RiderId)).ToArray();

        riderSelections = vm.Riders
            .Select((x, i) => new RiderSelectionRow(i + 1, x))
            .ToList();

        for (int i = riderSelections.Count(); i < vm.FantasyTeamSize; i++)
        {
            riderSelections.Add(new(i + 1));
        }
    }

    private async Task AddRider()
    {
        await httpClient.PostAsync($"api/fantasy-teams/{teamId}/race-entries/{raceId}/riders/{selectedRiderId}", new StringContent(""));
        await OnInitializedAsync();
    }

    private async Task RemoveRider(int riderId)
    {
        await httpClient.DeleteAsync($"api/fantasy-teams/{teamId}/race-entries/{raceId}/riders/{riderId}");
        await OnInitializedAsync();
    }
}