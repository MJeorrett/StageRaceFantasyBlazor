@page "/races/{raceId:int}/entries"

@using StageRaceFantasy.Application.RiderRaceEntries.Commands.Create

@inject HttpClient httpClient
@inject IJSRuntime js

@if (race == null || raceEntries == null)
{
    <MatBody1 Style="font-weight: bolder"><em>Loading...</em></MatBody1>
}
else
{
    <MatHeadline2>@race.Name</MatHeadline2>
    <MatHeadline4>Race Entries</MatHeadline4>

    if (raceEntries.Length == 0)
    {
        <p>No riders found.</p>
    }
    else
    {
        <MatTable Items="@raceEntries"
                  FilterByColumnName="RiderLastName"
                  ShowPaging="false"
                  PageSize="int.MaxValue"
                  Striped="true">
            <MatTableHeader>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Bib Number</th>
                <th>Star Value</th>
                <th></th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.RiderId</td>
                <td>@context.RiderFirstName</td>
                <td>@context.RiderLastName</td>
                <td>
                    @if (context.IsEntered)
                    {
                        <MatTextField Value="@context.BibNumber" ValueChanged="@((int newBibNumber) => context.BibNumber = newBibNumber)" OnFocusOut=@(() => UpdateRaceEntry(context.RiderId))></MatTextField>
                    }
                </td>
                <td>
                    @if (context.IsEntered)
                    {
                        <MatTextField Value="@context.StarValue" ValueChanged="@((int newStarValue) => context.StarValue = newStarValue)" OnFocusOut=@(() => UpdateRaceEntry(context.RiderId))></MatTextField>
                    }
                </td>
                <td>
                    <MatCheckbox Value="@context.IsEntered" ValueChanged="@((bool newIsEntered) => newIsEntered ? EnterRider(context.RiderId) : WithdrawRider(context.RiderId))" />
                </td>
            </MatTableRow>
        </MatTable>

        <MatButton OnClick="@SaveUpdates" Disabled="@disableSave">Save Updates</MatButton>
    }
}

@code {
    [Parameter] public int raceId { get; set; }

    private Race race;
    private GetRiderRaceEntryDto[] raceEntries;
    private List<int> modifiedRiderIds;
    private bool disableSave;

    protected override async Task OnInitializedAsync()
    {
        race = await httpClient.GetFromJsonAsync<Race>($"api/races/{raceId}");
        raceEntries = await httpClient.GetFromJsonAsync<GetRiderRaceEntryDto[]>($"api/races/{raceId}/entries");
        modifiedRiderIds = new List<int>();
    }

    async Task EnterRider(int riderId)
    {
        var raceEntry = raceEntries.First(x => x.RiderId == riderId);
        raceEntry.IsEntered = true;

        var addRaceEntryDto = new CreateRiderRaceEntryDto()
        {
            RiderId = riderId,
            RaceId = raceId,
        };

        await httpClient.PostAsJsonAsync($"api/races/{raceId}/entries", addRaceEntryDto);
        await OnInitializedAsync();
    }

    async Task WithdrawRider(int riderId)
    {
        var raceEntry = raceEntries.First(x => x.RiderId == riderId);
        raceEntry.IsEntered = false;

        await httpClient.DeleteAsync($"api/races/{raceId}/entries/{riderId}");
        modifiedRiderIds.Remove(riderId);

        await OnInitializedAsync();
    }

    void UpdateRaceEntry(int riderId)
    {
        var raceEntry = raceEntries.First(x => x.RiderId == riderId);

        if (modifiedRiderIds.Contains(riderId)) return;

        modifiedRiderIds.Add(riderId);
    }

    async Task SaveUpdates()
    {
        disableSave = true;

        foreach (int modifiedRiderId in modifiedRiderIds)
        {
            var raceEntry = raceEntries.FirstOrDefault(x => x.RiderId == modifiedRiderId);

            var update = new UpdateRiderRaceEntryDto()
            {
                BibNumber = raceEntry.BibNumber,
                StarValue = raceEntry.StarValue,
            };

            await httpClient.PutAsJsonAsync($"api/races/{raceId}/entries/{modifiedRiderId}", update);
        }

        disableSave = false;
    }
}
